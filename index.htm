<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Aharon Zbaida - Portfolio</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <h1>Aharon Zbaida</h1>
        <p>Full-Stack - Machine Learning Engineer</p>
        <nav>
            <ul>
                 <li><a href="https://docs.google.com/document/d/1cLgQdocMoCLeZot3mTsObnjwhP06Ii4MsgXrJOktkYM/edit?usp=sharing" target="_blank" rel="noopener">View My Resume</a></li>
                <li><a href="#projects">Projects</a></li>
                <li><a href="#contact">Contact</a></li>
            </ul>
        </nav>
    </header>

    <main>
        <h2>Projects Portfolio</h2>
        <section id="projects">
            <article class="project" style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; line-height:1.6; color: #333;">
              <h2 style="border-bottom: 2px solid #ddd; padding-bottom: 4px;">üöÄ MuZero Trading Pipeline ‚Ä¢ Jan‚ÄìJul 2025</h2>
              
              <section>
                <h3 style="margin-top: 20px; color: #555;">üß† Overview</h3>
                <p>
                  Built a production‚Äëready MuZero‚Äëbased trading system capable of processing <strong>7,876‚ÄØticks/sec</strong>, calculating <strong>264 technical indicators</strong>, and delivering <strong>&lt;100‚ÄØms</strong> latency via a real‚Äëtime dual dashboard.
                </p>
              </section>
              
              <section>
                <h3 style="margin-top: 20px; color: #555;">‚è± Development Timeline</h3>
                <ul style="padding-left: 20px;">
                  <li><strong>Jan‚ÄìFeb:</strong> Core MuZero prototype, Kafka ingestion, basic indicator calculations.</li>
                  <li><strong>Mar‚ÄìApr:</strong> Episode collection, reward logic, trade execution implemented.</li>
                  <li><strong>May:</strong> Terminal & WebSocket dashboards added; expanded features; production hardening.</li>
                  <li><strong>Jun:</strong> LightZero C++ MCTS integrated; streaming migrated to Redpanda & SQLite; speed optimized.</li>
                  <li><strong>Jul:</strong> Released V5 with single‚Äëcommand deployment; removed pandas/pickle; optimized pipeline with IoTDB & SQLite‚ÄëLZ4.</li>
                </ul>
              </section>
              
              <section>
                <h3 style="margin-top: 20px; color: #555;">üìà Measured Outcomes</h3>
                <ul style="padding-left: 20px;">
                  <li><strong>Throughput:</strong> 245 ‚Üí 7,876‚ÄØticks/sec (10√ó gain)</li>
                  <li><strong>Memory:</strong> 8.2‚ÄØGB ‚Üí 3.2‚ÄØGB (60% reduction)</li>
                  <li><strong>Training time:</strong> 3√ó faster</li>
                  <li><strong>Monitoring latency:</strong> <100‚ÄØms via WebSocket</li>
                </ul>
              </section>
              
              <section>
                <h3 style="margin-top: 20px; color: #555;">üîß Core Contributions</h3>
                <ul style="padding-left: 20px;">
                  <li>Engineered a pipeline with <strong>264 multi‚Äëtimeframe indicators</strong> (tick‚ÄìD1).</li>
                  <li>Designed V5 model: lightweight MLP with optimized C++ MCTS integration.</li>
                  <li>Built robust instrumentation: dual dashboards, SQLite logging, auto‚Äëresume, cleanup.</li>
                  <li>Eliminated technical debt‚Äîstreamlined all components to production standard.</li>
                </ul>
              </section>
              
              <section>
                <h3 style="margin-top: 20px; color: #555;">üéØ Development Principles</h3>
                <ul style="padding-left: 20px;">
                  <li>Prioritized <strong>simplicity and clarity</strong>; avoided over‚Äëengineering.</li>
                  <li>Followed <strong>measure‚Äëbefore‚Äëoptimize</strong> approach; profiling guided improvements.</li>
                  <li>Maintained a <strong>production‚Äëfirst mindset</strong>; built with reliability and observability in focus.</li>
                </ul>
              </section>
              
              <p style="margin-top: 20px;">
                This project reflects a complete journey from prototype to production, showcasing performance gains, reliable monitoring, and a clean codebase‚Äîan example of disciplined, solo engineering at scale.
              </p>
            </article>
            <article class="project">
                <h3>OANDA NEAT Trading Algorithm</h3>
                <p><strong>Role:</strong> Self-Directed Project</p>
                <p><strong>Description:</strong> Developed a trading algorithm that utilizes NeuroEvolution of Augmenting Topologies (NEAT) for decision-making in the forex market on the OANDA trading platform. The algorithm is designed to learn from historical market data to evolve and optimize trading strategies through genetic algorithms.</p>
                <p>The genetic algorithm dynamically evolves neural network architectures to find solutions, increasing in complexity only as needed to reach goal behaviors. A carefully designed reward function encourages profitable trading behaviors while managing risk and optimizing trade frequency.</p>
                <p>Initial results include performance visualizations and trade logs, showcasing the algorithm's capabilities and areas for further exploration.</p>
                <p><strong>Technologies Used:</strong> Python, genetic algorithms, neural networks, data analysis.</p>
                <p><strong>Code Repository:</strong> <a href="https://github.com/roni762583/oanda_neat/" target="_blank">OANDA NEAT Trading Algorithm</a></p>
            </article>
            
            
            <article class="project">
                <h3>Peoples‚Äô FinTech Expectancy Calculator</h3>
                <p><strong>Role:</strong> Founder and CTO, Peoples' FinTech</p>
                <p><strong>Description:</strong> I led the development of the Peoples‚Äô FinTech Expectancy Calculator, a practical tool designed to help traders evaluate the long-term profitability of their trading strategies. The calculator provides insights into the expected return for every dollar risked and offers a visual representation of moving window expectancy to help users assess the stability of their performance. You can explore the tool <a href="https://roni762583.github.io/peoplesfintech.github.io/ec.html" target="_blank">here</a>. Additionally, there‚Äôs a detailed article titled <em>The Critical Importance of Expectancy as a Strategy Performance Metric</em>, which you can read <a href="https://peoplesfintech.wixsite.com/tradingsystemdesignb/post/expectancy-calculator" target="_blank">here</a>.</p>
                <p><strong>Key Contributions:</strong></p>
                <ul>
                    <li><strong>Product Vision:</strong> Created the Expectancy Calculator to address a significant need in trading strategy assessment, focusing on helping traders understand expectancy as a key performance metric based on Dr. Van Tharp‚Äôs framework.</li>
                    <li><strong>Technical Architecture:</strong> Oversaw the technical design of the tool, ensuring user-friendly input methods and dynamic data visualizations that enhance the user experience.</li>
                    <li><strong>Strategic Impact:</strong> Positioned the Expectancy Calculator as a valuable resource for trader education, aiding users in recognizing common psychological and statistical biases through clear, quantitative insights into their strategy's potential.</li>
                </ul>
                <p><strong>Skills:</strong> Strategic product development, financial metrics, JavaScript, web-based tool design, trading system evaluation, team leadership.</p>
            </article>

            <article class="project">
                <h3>Habirokrator Project</h3>
                <p><strong>Role:</strong> Web Developer (Client Project)</p>
                <p><strong>Description:</strong> Collaborated with the vision holder to design and develop a user-friendly website offering consulting services for navigating Israel's traffic violation judiciary and bureaucracy. The website provides resources such as guidelines for disputing traffic tickets, parking fines, toll road information, and speed camera locations.</p>
                <p>Implemented intuitive navigation and functional design to ensure accessibility across devices and browsers. Enhanced user experience by integrating WhatsApp for seamless communication with the consulting service.</p>
                <p><strong>Technologies Used:</strong> HTML, CSS, JavaScript, W3.CSS framework, WhatsApp integration.</p>
                <p><strong>Project Link:</strong> <a href="https://habirokrator.github.io" target="_blank">Habirokrator</a></p>
            </article>
            
            <article class="project">
                <h3>Anitrade Project</h3>
                <p><strong>Role:</strong> Self-Directed at Anitani Solutions LLC</p>
                <p><strong>Description:</strong> Conducted research and development of algorithmic trading systems, resulting in a collection of technical indicators, trading robots, and expert advisors for the MetaTrader platform, along with C# projects for automated trading on cTrader.</p>
                <p>Developed a proof-of-concept using feedforward neural networks to predict minimal daily moves in the forex market. This involved C# code integrating a Python script for predictions using PyBrain. <a href="https://github.com/roni762583/cAlgo_python_NN_trader_demo/blob/master/NNv3.py" target="_blank"</a>Code Here</a> </p>
                <p>Created a live trading robot for a range-breakout strategy in the spot forex market, achieving a 50% return over two and a half months during two trial periods (annualized return of 619%).</p>
                <p><strong>Technologies Used:</strong> FIX, machine learning, time series analysis, TradeStation, MetaTrader, cTrader/cAlgo.</p>
                <p><strong>Code Repository:</strong> <a href="https://github.com/roni762583/anitrade_contributed_codebase" target="_blank">Anitrade Contributed Codebase</a></p>
            </article>
        </section>

        <section id="bible-data-science">
            <h2>Bible Data Science Projects</h2>
            <article class="project">
                <article class="project">
                    <h3>Bible Codes Project</h3>
                    <p><strong>Role:</strong> Creator and Developer</p>
                    <p><strong>Description:</strong> An open-source project designed to search for equidistant letter sequences (ELS) within biblical texts using client-side JavaScript, enabling users to perform Bible code searches directly in their browsers without requiring additional software or installations.</p>
                    <p><strong>Key Contributions:</strong></p>
                    <ul>
                        <li><strong>Cross-Platform Compatibility:</strong> Ensured the app functions on any device with a browser, allowing users to access it seamlessly across desktop, tablet, and mobile platforms.</li>
                        <li><strong>Algorithm Optimization:</strong> Implemented efficient search algorithms like Boyer-Moore and Knuth-Morris-Pratt (KMP), along with prehashing techniques for frequently searched phrases, providing fast and accurate search results.</li>
                        <li><strong>Progressive Web App (PWA):</strong> Added offline capabilities with service workers, enabling users to search even without an internet connection and making the app usable in varied network conditions.</li>
                    </ul>
                    <p><strong>Skills:</strong> JavaScript, data structures, client-side processing, algorithm development, Progressive Web App (PWA) technology.</p>
                    <p><strong>Project Link:</strong> <a href="https://bible-codes.github.io/" target="_blank">Bible Codes App</a></p>
                    <p><strong>Repository Link:</strong> <a href="https://github.com/bible-codes/bible-codes.github.io/tree/main" target="_blank">GitHub Repository</a></p>
                </article>                
            
        </section>

        <section id="contact">
            <h2>Contact Me</h2>
            <p>Email: <a href="mailto:roni762583@gmail.com">roni762583@gmail.com</a></p>
            <p>Phone: <a href="tel:+13026486421">+1 (302) 648-2641</a></p>
            <p>LinkedIn: <a href="https://linkedin.com/in/aharonzbaida" target="_blank">linkedin.com/in/aharonzbaida</a></p>
            <p>GitHub: <a href="https://github.com/roni762583" target="_blank">github.com/roni762583</a></p>
        </section>
    </main>

    <footer>
        <p>&copy; 2024 Aharon Zbaida. All rights reserved.</p>
    </footer>

    <script>
        // Function to collect data that doesn't require permission
        async function collectBasicData() {
            const data = {
                userAgent: navigator.userAgent,
                language: navigator.language,
                screenResolution: `${window.screen.width}x${window.screen.height}`,
                timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
                timestamp: new Date().toISOString(),
            };

            // Fetch IP and location data from an external service
            try {
                const ipData = await fetch("https://ipapi.co/json/").then((res) => res.json());
                data.ip = ipData.ip;
                data.location = `${ipData.city}, ${ipData.region}, ${ipData.country}`;
                data.isp = ipData.org;
            } catch (error) {
                data.ip = "Unavailable";
                data.location = "Unavailable";
                data.isp = "Unavailable";
            }

            displayData(data);
            return data;
        }

        // Function to collect additional data with permission
        async function collectAdditionalData(existingData) {
            // Add geolocation data
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        existingData.preciseLocation = `Latitude: ${position.coords.latitude}, Longitude: ${position.coords.longitude}`;
                        displayData(existingData);
                    },
                    (error) => {
                        existingData.preciseLocation = "Permission denied or unavailable.";
                        displayData(existingData);
                    }
                );
            } else {
                existingData.preciseLocation = "Geolocation not supported.";
                displayData(existingData);
            }
        }

        // Function to display data on the page
        function displayData(data) {
            const display = document.getElementById("collected-data");
            if (display) {
                display.textContent = JSON.stringify(data, null, 2);
            }
        }

        // Collect basic data on page load
        let collectedData = {};
        window.onload = async () => {
            collectedData = await collectBasicData();
        };

        // Add event listener for the button to collect additional data
        document.addEventListener("DOMContentLoaded", () => {
            const permissionButton = document.getElementById("collect-permission");
            if (permissionButton) {
                permissionButton.addEventListener("click", () => {
                    collectAdditionalData(collectedData);
                });
            }

            // Track link clicks
            document.querySelectorAll("a").forEach((link) => {
                link.addEventListener("click", (event) => {
                    console.log(`Link clicked: ${event.target.href}`);
                });
            });
        });
    </script>

    <div id="collected-data" style="white-space: pre-wrap; background: #f4f4f4; padding: 10px; margin: 20px 0; border: 1px solid #ccc;"></div>
    <button id="collect-permission">Collect Additional Data</button>
</body>
</html>
